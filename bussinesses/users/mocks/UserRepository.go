// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "gofilm/bussinesses/users"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepository) GetByID(id int) (*users.User, error) {
	ret := _m.Called(id)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(int) *users.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidUser provides a mock function with given fields: email, password
func (_m *UserRepository) GetValidUser(email string, password string) (*users.User, error) {
	ret := _m.Called(email, password)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string, string) *users.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: user
func (_m *UserRepository) Store(user *users.User) (*users.User, error) {
	ret := _m.Called(user)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(*users.User) *users.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *UserRepository) Update(id int, user *users.User) (*users.User, error) {
	ret := _m.Called(id, user)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(int, *users.User) *users.User); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *users.User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
