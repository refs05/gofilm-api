// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	carts "gofilm/bussinesses/carts"

	mock "github.com/stretchr/testify/mock"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

// ChangeStatus provides a mock function with given fields: id
func (_m *CartRepository) ChangeStatus(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCart provides a mock function with given fields: userID
func (_m *CartRepository) DeleteCart(userID int) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByID provides a mock function with given fields: id
func (_m *CartRepository) GetCartByID(id int) (*carts.Cart, error) {
	ret := _m.Called(id)

	var r0 *carts.Cart
	if rf, ok := ret.Get(0).(func(int) *carts.Cart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByUser provides a mock function with given fields: userID
func (_m *CartRepository) GetCartByUser(userID int) (*carts.Cart, error) {
	ret := _m.Called(userID)

	var r0 *carts.Cart
	if rf, ok := ret.Get(0).(func(int) *carts.Cart); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmUser provides a mock function with given fields: id
func (_m *CartRepository) GetFilmUser(id int) (*carts.Cart, error) {
	ret := _m.Called(id)

	var r0 *carts.Cart
	if rf, ok := ret.Get(0).(func(int) *carts.Cart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCart provides a mock function with given fields: cart
func (_m *CartRepository) StoreCart(cart *carts.Cart) (*carts.Cart, error) {
	ret := _m.Called(cart)

	var r0 *carts.Cart
	if rf, ok := ret.Get(0).(func(*carts.Cart) *carts.Cart); ok {
		r0 = rf(cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*carts.Cart) error); ok {
		r1 = rf(cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCart provides a mock function with given fields: userID, cart
func (_m *CartRepository) UpdateCart(userID int, cart *carts.Cart) (*carts.Cart, error) {
	ret := _m.Called(userID, cart)

	var r0 *carts.Cart
	if rf, ok := ret.Get(0).(func(int, *carts.Cart) *carts.Cart); ok {
		r0 = rf(userID, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *carts.Cart) error); ok {
		r1 = rf(userID, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
